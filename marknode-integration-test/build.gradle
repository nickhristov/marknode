/*
 * Copyright 2014-2016 Wise Persist Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = 'marknode-integration-test'

dependencies {
    testCompile(project(':marknode'))
    testCompile(project(':marknode-ext-autolink'))
    testCompile(project(':marknode-ext-gfm-strikethrough'))
    testCompile(project(':marknode-ext-gfm-tables'))
    testCompile(project(':marknode-ext-yaml-front-matter'))
    testCompile(project(':marknode-test-util'))

    testCompile 'org.pegdown:pegdown:1.5.0'
    testCompile 'org.openjdk.jmh:jmh-core:1.11.3'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3'

    testCompile 'commons-io:commons-io:2.4'

    // logging related
    testCompile 'org.slf4j:slf4j-api:1.7.6'
    testCompile 'ch.qos.logback:logback-core:1.1.1'
    testCompile 'ch.qos.logback:logback-classic:1.1.1'

    /*
      This is required by logback confitional processing, for more info please
      see: http://logback.qos.ch/setup.html#janino

      The org.codehaus.janino:commons-compiler:2.6.1 dependency will be
      automatically pulled in by Maven's transitivity rules
    */
    testCompile 'org.codehaus.janino:janino:2.6.1'
    // java mail logging
    testCompile 'javax.mail:mail:1.4.5'
}

jar.doFirst {
    sourceSets.main.java.srcDirs.each {
        from it
    }
}

ext.userHome = System.getProperty("user.home")

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task aggregateJavadocs(type: Javadoc) {
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.links(project.ext.javadocLinks)
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    source = sourceSets.main.allJava
    classpath += sourceSets.main.runtimeClasspath
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: aggregateJavadocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'marknode integration tests'
                packaging 'jar'
                description 'Tests integration of all extensions'
                url 'http://marknode.org/'

                scm {
                    connection 'scm:git:git@github.com:jiakuan/marknode.git'
                    developerConnection 'scm:git:git@github.com:jiakuan/marknode.git'
                    url 'git@github.com:jiakuan/marknode.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jiakuan'
                        name 'Jiakuan Wang'
                        email 'jiakuan.wang@gmail.com'
                        organization 'WisePersist'
                        organizationUrl 'http://wisepersist.com'
                        roles {
                            role 'architect'
                            role 'developer'
                        }
                        timezone '+8'
                    }
                }
            }
        }
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: "file://${userHome}/Dropbox/Public/mvn-repo/")
//        }
//    }
//}

task createPom << {
    pom {
        project {
            packaging 'jar'
            build {
                plugins {
                    plugin {
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '3.1'
                        configuration {
                            source '1.7'
                            target '1.7'
                            encoding 'UTF-8'
                        }
                    }
                }
            }
        }
    }.writeTo("$projectDir/pom.xml")
}
